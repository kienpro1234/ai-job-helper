generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?    // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  resumeAnalysis ResumeAnalysis[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?      // Years of experience
  
  // Relations
  skills        String[]  // Array of skills
  assessments   Assessment[]

  //Sửa ở đây để 1 user có thể có nhiều resume
  resume        Resume[]
  coverLetter   CoverLetter[]
  savedJobs     SavedJob[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())

  title     String   
  userId      String   
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  analyses  ResumeAnalysis[]

  @@index([userId]) 
}

model ResumeAnalysis {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  jobDescription  String   @db.Text

  formattedJobDescription String? @db.Text // Lưu JD đã được định dạng HTML
  matchScore      Int
  missingKeywords String[]
  summary         String   @db.Text
  suggestions     String[]

  inlineFeedback  Json?    // Lưu nhận xét trực quan dưới dạng JSON


//Những trường này phục vụ cho việc lưu trữ chi tiết kết quả phân tích cv
  jobTitle        String?  // Tiêu đề công việc
  companyName     String?  // Tên công ty
  jobSource       String?  // Nguồn (topcv.vn, linkedin.com, etc.)
  jobUrl          String?  // URL để xem chi tiết job
  sourceType      String?  // Nguồn gốc (JSearch, Google Search)

  createdAt       DateTime @default(now())

  @@index([userId])
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed

  jobUrl          String?   // URL để xem chi tiết job
  jobSource       String?   // Nguồn (topcv.vn, etc.)
  sourceType      String?   // Nguồn gốc (JSearch, Google Search)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook String    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

model SavedJob {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  title           String
  companyName     String
  location        String?
  description     String    @db.Text
  url             String    @unique
  source          String?   // Nguồn gốc công việc (VD: "LinkedIn", "TopCV")
  sourceType      String? 

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}